// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique @db.String
  username      String    @unique @db.String
  password      String    @db.String
  name          String?   @db.String
  avatarUrl     String?   @db.String
  role          Role      @default(USER)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Blog          Blog[]
  Comment       Comment[]
  Like          Like[]

  @@index([email, username])
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String // Can store plain text if needed
  contentHtml String // <-- New field for HTML
  topic       String
  tags        String[]
  image       String
  isPublic    Boolean  @default(true)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
